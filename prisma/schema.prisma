// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthUser {
  id          String        @id @unique
  session     AuthSession[]
  Key         AuthKey[]
  // here you can add custom fields for your user
  // e.g. name, email, username, roles, etc.
  links       Link[]
  tags        Tag[]
  tagsToLinks TagToLink[]

  @@map("user")
}

model AuthSession {
  id             String   @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model AuthKey {
  id              String   @id @unique
  hashed_password String?
  user_id         String
  primary_key     Boolean
  expires         BigInt?
  user            AuthUser @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model Link {
  id          String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId      String   @map("user_id")
  url         String   @db.VarChar(1000)
  title       String?  @db.VarChar(100)
  description String?  @db.VarChar(1000)
  priority    Int      @default(0) @db.SmallInt
  isFavorite  Boolean  @default(false) @map("is_favorite")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")

  user AuthUser    @relation(references: [id], fields: [userId], onDelete: Cascade)
  tags TagToLink[]

  @@map("links")
}

model Tag {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String   @db.VarChar(100)
  color     String   @db.VarChar(7)
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  links TagToLink[]
  user  AuthUser    @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@map("tags")
}

model TagToLink {
  tagId     String   @map("tag_id") @db.Uuid
  linkId    String   @map("link_id") @db.Uuid
  userId    String   @map("user_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  tag  Tag      @relation(references: [id], fields: [tagId], onDelete: Cascade)
  link Link     @relation(references: [id], fields: [linkId], onDelete: Cascade)
  user AuthUser @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@id([tagId, linkId])
  @@map("tags_to_links")
}
